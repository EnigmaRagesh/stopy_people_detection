obstacle_range: 2.5             #default: 2.5
raytrace_range: 3.0             #default: 3.0 
max_obstacle_height: 1.4        #default: 2.0

map_type: voxel

# Configure Voxel Grid: (http://wiki.ros.org/costmap_2d/kinectic/obstacles#VoxelCostmapPlugin)
publish_voxel_map: true
z_voxels: 4
z_resolution: 0.35

footprint: [[0.2925,0.260],[0.2925,-0.260],[-0.2925,-0.260],[-0.2925,0.260]]       #footprint measurements

inflation_radius: 0.3
cost_scaling_factor: 1.0
footprint_padding: -0.1

# http://wiki.ros.org/costmap_2d/hydro/obstacles

observation_sources:  laser_scan_sensor point_cloud_sensor #point_cloud_clearing #point_cloud_depth_laser

laser_scan_sensor: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}#, inf_is_valid: true}

# in simulation: inf is not valid (max_range = 6.0)
# WARNING: in real robot: inf_is_valid!! (RPLIDAR outputs inf values when beyond maximum range)

# Better to use downsampled pcl:
# http://answers.ros.org/question/11515/kinect-obstacle-avoidance-moving-obstacles-dont-clear/

point_cloud_sensor: {sensor_frame: camera_link, data_type: PointCloud2, topic: camera/depth/points, marking: true, clearing: true} #min_obstacle_height: 0.31}

#point_cloud_clearing: {sensor_frame: /camera, data_type: PointCloud2, topic: /robot/depth_camera, marking: false, clearing: true}#, raytrace_range: 6.0}  #na sim n Ã© preciso "clearing" sensor

# Not used ==> Results are better when using voxels and 3d information instead of 2d even by pushing the pcl to laser (because the laser clears the pcl obstacles -- they are in the same plane)|.
#point_cloud_depth_laser: {sensor_frame: camera_depth_frame, data_type: LaserScan, topic: /asus_depth_scan, marking: true, clearing: true, obstacle_range: 2.0}